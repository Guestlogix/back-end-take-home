const request = require('supertest')
const app = require('../app')

describe('Test Get / routes', function () {
  it('should fail if Origin and Destination are not provided.', function (done) {
    request(app)
      .get('/')
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if Origin is not provided.', function (done) {
    request(app)
      .get('/')
      .query({ destination: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not 3 characters.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC', destination: 'ABC123' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not 3 characters.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC123', destination: 'CBC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is same as origin.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC', destination: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if invalid origin is provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'AB1', destination: 'YQZ' })
      .set('Accept', 'application/json')
      .expect(404, done)
  })
  it('should fail if invalid destination is provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'DEN', destination: 'CBC' })
      .set('Accept', 'application/json')
      .expect(404, done)
  })
  it('should pass if valid destination and inputs are provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'DEN', destination: 'YQZ' })
      .set('Accept', 'application/json')
      .expect(200, done)
  })
})

describe('Test Get /details routes', function () {
  it('should fail if Origin and Destination are not provided.', function (done) {
    request(app)
      .get('/')
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if Origin is not provided.', function (done) {
    request(app)
      .get('/')
      .query({ destination: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not 3 characters.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC', destination: 'ABC123' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is not 3 characters.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC123', destination: 'CBC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if destination is same as origin.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'ABC', destination: 'ABC' })
      .set('Accept', 'application/json')
      .expect(400, done)
  })
  it('should fail if invalid origin is provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'AB1', destination: 'YQZ' })
      .set('Accept', 'application/json')
      .expect(404, done)
  })
  it('should fail if invalid destination is provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'DEN', destination: 'CBC' })
      .set('Accept', 'application/json')
      .expect(404, done)
  })
  it('should pass if valid destination and inputs are provided.', function (done) {
    request(app)
      .get('/')
      .query({ origin: 'DEN', destination: 'YQZ' })
      .set('Accept', 'application/json')
      .expect(200, done)
  })
  
})
