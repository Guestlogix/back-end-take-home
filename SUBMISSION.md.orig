# GuestLogix Challenge by Vanderson

## Important Info:
<<<<<<< HEAD
- This application has two ways of calculating the shortest route.
 
  1- A pseudo solution using recursive calls, which I didn't finish but decided to leave it in the application so 
  you guys see where I was going with it.
  
  2 - And the official Route calculator which uses a Tree Data Structure approach and is fully functional. It calculates the 
  shortest Route regardless on how many connections the flight will have. The good thing is that it executes quite 
  fast. Hope you guys like it.
  
  Oh! And before I forget, THANK YOU VERY MUCH for considering me for this position, it was a huge pleasure working 
  on this challenge.
=======
- This application already has a routes calculator using Brute Force and a pseudo solution using recursive calls.
  Which didn't quite work, but now I'm working on it using Tree and I'm really confident it's going to work 
  flawlessly.
>>>>>>> 44392c5befaebf803d2d8ea08a889d19e665aede

## Getting Started:
- Please clone this repository to your pc.
- Open the project using IntelliJ IDEA.
- Run the main method com.guestlogix.BackEndTakeHomeApplication.main. 
- After running it, please wait around 40 seconds for the project to start the database and insert in it all the 
  initial data provided in the CSV files you guys gave me.
- When the application is up, you'll be able to access the generated database in the following URL 
  http://localhost:8080/h2-console. In it you'll be able to see all the relations and data that was generated for 
  this project and run SQL queries.
  The interface displayed should have Driver Class: org.h2.Driver, JDBC Url jdbc:h2:~/db_guestlogix 
  (this is the location where the database will be created), User Name: sa and Password: empty. Then you click the 
  Connect button and you are good to go.
- To use the algorithms that find the routes, please access the following 
  URL http://localhost:8080/route/calculate/{originAirportIataCode}/{destinationAirportIataCode}. 
  An example of execution is ``http://localhost:8080/route/calculate/CMH/ABJ``
  After accessing the mentioned URL passing the Airport Iata Codes, the system will calculate and return a friendly 
  message informing the routes found or a message informing no route was found.
  
  You guys said to return an Array, the method that calculates the routes itself does return an array, but for the 
  user's feedback I decided to return a String.
  
- There's also this URL that calls an unfinished recursive algorithm 
 ``http://localhost:8080/route/calculate-recursive/CMH/ABJ``. Just like I told you, this recursive approach has not 
  been finished, because I decided to go with the Tree approach, but I decided to leave this code in the application 
  just so you guys see where I was going with it.  

## Technologies Used:
- Java8
- Spring Technologies
- H2 Database
- IntelliJ IDEA
- JUnit
- REST Assured (For Testing Rest Api)
- Mockito (Mock Resources For Testing)
- Maven

### More:
In case of any doubt, please e-mail me at assis.vanderson@gmail.com, I'll be more than pleased to talk to you.
